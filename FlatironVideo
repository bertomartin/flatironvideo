Visually:

1. press "new note"
---> new note form (video_id, video_timestamp)
2. pauses video, and shows text field
3. when you submit form (notes), saves (with timestamp and video_id) and starts playing the video
---> submitted the note form (new note instance in database, with video_id, video_timestamp, text)
4. you can see a "pin" for all the notes on the video timeline
---> Note.all.find_by(video_id)
---> video_timestamp will plot it on video timeline

MODELS:

video
- association: has_many :notes
- columns: name:string, link:string, lecture_date:date

note
- association: belongs_to :video
- columns: body:text, video_timestamp:integer, video_id:integer

#TODO:
#- generate video model
#- generate note model
#- do associations
#- stub out controller actions 
#- get seed data
#- views

- test the Javascript functionality (video.js)
- questions
- instructors
- students
- answers

FEATURES:
- Instructor can post videos
- Students can post questions
- Instructor can answer questions
- Students can save and edit notes
- Plot pins for questions and notes
- Customize skin for video timeline note pins


Video.js
- get time dynamically, change png of skin to be 

PULL REQUESTS:
- change your "video_player" to "video_tag"

END GOALS:
- be able to add videos (links)
- finish edit/destroy functionality for notes
- instructor login first

Making Edit/Update Work
- press edit button
--- 1: show/hide: show the form version, hid the finished version
- render the form version of the note
- hit save
--- 1: .post(update route, data, function(response))
--- 2: in controller, update the note. send back json object with updated information
--- 3: replace the note body with the response
- updates database with updated note info
- shows updated note info on the page
--- 1: switches show and hide






